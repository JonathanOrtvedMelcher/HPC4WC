%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90
Compiled : 08/25/24  13:08:02
Compiler : Version 12.0.3
Ftnlx    : Version 12.0.3 
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -haccel=nvidia_60 -hnetwork=aries
           -hdynamic -D__CRAYXC -D__CRAY_HASWELL -D__CRAY_NVIDIA60
           -D__CRAYXT_COMPUTE_LINUX_TARGET -O3 -hfp3 -eZ -ffree -N255 -ec -eC
           -eI -eF -rm -c stencil2d-simplecopy-k.F90
           -I/opt/cray/pe/cce/12.0.3/cce-clang/x86_64/lib/clang/12.0.0/include
           -I/opt/cray/pe/cce/12.0.3/cce/x86_64/include/craylibs -I/usr/include
           -I/opt/cray/pe/libsci/20.09.1/CRAYCLANG/9.0/x86_64/include
           -I/opt/cray/pe/mpt/7.7.18/gni/mpich-crayclang/10.0/include
           -I/usr/local/cuda-11.0/include -I/usr/local/cuda-11.0/nvvm/include
           -I/opt/cray/rca/2.2.20-7.0.3.1_3.15__g8e3fb5b.ari/include
           -I/opt/cray/pe/pmi/5.0.17/include -I/opt/cray/pe/atp/3.14.5/include
           -I/opt/cray/xpmem/default/include -I/opt/cray/dmapp/default/include
           -I/opt/cray/alps/6.6.67-7.0.3.1_3.18__gb91cd181.ari/include
           -I/opt/cray/wlm_detect/1.3.3-7.0.3.1_3.6__g7109084.ari/include
           -I/opt/cray/ugni/default/include
           -I/opt/cray/gni-headers/default/include
           -I/opt/cray/alps/6.6.67-7.0.3.1_3.18__gb91cd181.ari/include
           -I/opt/cray/krca/2.2.8-7.0.3.1_3.14__g59af36e.ari/include
           -I/opt/cray-hss-devel/9.0.0/include
           -I/opt/cray/udreg/default/include -I/usr/include
Program
  Units  : MAIN

ftnlx report
------------
Source   : /users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90
Date     : 08/25/2024  13:08:05


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                         ! ******************************************************
    2.                         !     Program: stencil2d
    3.                         !      Author: Oliver Fuhrer
    4.                         !       Email: oliverf@vulcan.com
    5.                         !        Date: 20.05.2020
    6.                         ! Description: Simple stencil example (4th-order diffusion)
    7.                         ! ******************************************************
    8.                         
    9.                         ! Driver for apply_diffusion() that sets up fields and does timings
   10.                         program main
   11.                             use m_utils, only: timer_start, timer_end, timer_get, is_master, num_rank, write_field_to_file
   12.                             implicit none
   13.                         
   14.                             ! constants
   15.                             integer, parameter :: wp = 4 ! working precision --> set values to doubles
   16.                         
   17.                             ! local
   18.                             integer :: nx, ny, nz, num_iter
   19.                             logical :: scan
   20.                         
   21.                             integer :: num_halo = 2
   22.                             real (kind=wp) :: alpha = 1.0_wp / 32.0_wp
   23.                         
   24.                             real (kind=wp), allocatable :: in_field(:, :, :)
   25.                             real (kind=wp), allocatable :: out_field(:, :, :)
   26.                         
   27.                             integer :: timer_work
   28.                             real (kind=8) :: runtime
   29.                         
   30.                             integer :: cur_setup, num_setups = 1
   31.                             integer :: nx_setups(7) = (/ 16, 32, 48, 64, 96, 128, 192 /)
   32.                             integer :: ny_setups(7) = (/ 16, 32, 48, 64, 96, 128, 192 /)
   33.                         
   34.                         #ifdef CRAYPAT
   35.    D                        include "pat_apif.h"
   36.    D                        integer :: istat
   37.    D                        call PAT_record( PAT_STATE_OFF, istat )
   38.                         #endif
   39.                         
   40.  +                          call init()
   41.                         
   42.    Ip                       if ( is_master() ) then
   43.                                 write(*, '(a)') '# ranks nx ny nz num_iter time'
   44.                                 write(*, '(a)') 'data = np.array( [ \'
   45.                             end if
   46.                         
   47.                             if ( scan ) num_setups = size(nx_setups) * size(ny_setups)
   48.  + 1------------------<     do cur_setup = 0, num_setups - 1
   49.    1                    
   50.    1                            if ( scan ) then
   51.    1                                nx = nx_setups( modulo(cur_setup, size(ny_setups) ) + 1 )
   52.    1                                ny = ny_setups( cur_setup / size(ny_setups) + 1 )
   53.    1                            end if
   54.    1                    
   55.  + 1                            call setup()
   56.    1                    
   57.    1 Ip                         if ( .not. scan .and. is_master() ) &
   58.  + 1                                call write_field_to_file( in_field, num_halo, "in_field.dat" )
   59.    1                    
   60.    1                            ! warmup caches
   61.  + 1                            call apply_diffusion( in_field, out_field, alpha, num_iter=1 )
   62.    1                    
   63.    1                            ! time the actual work
   64.    1                    #ifdef CRAYPAT
   65.    D                            call PAT_record( PAT_STATE_ON, istat )
   66.    1                    #endif
   67.    1                            timer_work = -999
   68.    1 Ip                         call timer_start('work', timer_work)
   69.    1                    
   70.  + 1                            call apply_diffusion( in_field, out_field, alpha, num_iter=num_iter )
   71.    1                    
   72.    1 Ip                         call timer_end( timer_work )
   73.    1                    #ifdef CRAYPAT
   74.    D                            call PAT_record( PAT_STATE_OFF, istat )
   75.    1                    #endif
   76.    1                    
   77.    1 Ip                         if ( .not. scan .and. is_master() ) &
   78.  + 1                                call write_field_to_file( out_field, num_halo, "out_field.dat" )
   79.    1                    
   80.  + 1                            call cleanup()
   81.    1                    
   82.    1 Ip                         runtime = timer_get( timer_work )
   83.    1 Ip                         if ( is_master() ) &
   84.    1                                write(*, '(a, i5, a, i5, a, i5, a, i5, a, i8, a, e15.7, a)') &
   85.    1 Ip                                 '[', num_rank(), ',', nx, ',', ny, ',', nz, ',', num_iter, ',', runtime, '], \'
   86.    1                    
   87.    1------------------>     end do
   88.                         
   89.    Ip                       if ( is_master() ) then
   90.                                 write(*, '(a)') '] )'
   91.                             end if
   92.                         
   93.    Ip                       call finalize()
   94.                         
   95.                         contains
   96.                         
   97.                         
   98.                             ! Integrate 4th-order diffusion equation by a certain number of iterations.
   99.                             !
  100.                             !  in_field          -- input field (nx x ny x nz with halo in x- and y-direction)
  101.                             !  out_field         -- result (must be same size as in_field)
  102.                             !  alpha             -- diffusion coefficient (dimensionless)
  103.                             !  num_iter          -- number of iterations to execute
  104.                             !
  105.                             subroutine apply_diffusion( in_field, out_field, alpha, num_iter )
  106.                                 implicit none
  107.                         
  108.                                 ! arguments
  109.                                 real (kind=wp), intent(inout) :: in_field(:, :, :)
  110.                                 real (kind=wp), intent(inout) :: out_field(:, :, :)
  111.                                 real (kind=wp), intent(in) :: alpha
  112.                                 integer, intent(in) :: num_iter
  113.                         
  114.                                 ! local
  115.                                 real (kind=wp), save, allocatable :: tmp1_field(:, :)
  116.                                 real (kind=wp), save, allocatable :: tmp2_field(:, :, :)
  117.                                 integer :: iter, i, j, k
  118.                         
  119.                                 ! this is only done the first time this subroutine is called (warmup)
  120.                                 ! or when the dimensions of the fields change
  121.  +                              if ( allocated(tmp1_field) .and. &
  122.                                     any( shape(tmp1_field) /= (/nx + 2 * num_halo, ny + 2 * num_halo/) ) ) then
  123.                                     deallocate( tmp1_field, tmp2_field )
  124.                                 end if
  125.                                 if ( .not. allocated(tmp1_field) ) then
  126.                                     allocate( tmp1_field(nx + 2 * num_halo, ny + 2 * num_halo) )
  127.                                     allocate( tmp2_field(nx + 2 * num_halo, ny + 2 * num_halo, nz) )
  128.    AC----------------<>             tmp1_field = 0.0_wp
  129.    AC----------------<>             tmp2_field = 0.0_wp
  130.                                 end if
  131.                         
  132.  + F                            do iter = 1, num_iter
  133.    F                    
  134.    F Vcr2 I----------<>             call update_halo( in_field )
  135.    F                    
  136.    F                                ! do forward in time step
  137.  + F ir4--------------<             do k = 1, nz
  138.    F ir4 iVcr2-------<>                 tmp1_field(:,:) = in_field(:,:,k)
  139.    F ir4                
  140.  + F ir4 fi-----------<             do j = 1 + num_halo, ny + num_halo
  141.    F ir4 fi Vcr2------<             do i = 1 + num_halo, nx + num_halo
  142.    F ir4 fi Vcr2                        out_field(i, j, k) = tmp1_field(i, j)
  143.    F ir4 fi Vcr2------>             end do
  144.    F ir4 fi----------->             end do
  145.    F ir4                
  146.    F ir4                                if ( iter /= num_iter ) then
  147.  + F ir4 f------------<                     do j = 1 + num_halo, ny + num_halo
  148.    F ir4 f Vcr2-------<                     do i = 1 + num_halo, nx + num_halo
  149.    F ir4 f Vcr2                                 in_field(i, j, k) = out_field(i, j, k)
  150.    F ir4 f Vcr2------->                     end do
  151.    F ir4 f------------>                     end do
  152.    F ir4                                end if
  153.    F ir4                
  154.    F ir4-------------->             end do
  155.    F                    
  156.    F                    
  157.    F------------------>         end do
  158.                         
  159.  +                              call update_halo( out_field )
  160.                         
  161.                             end subroutine apply_diffusion
  162.                         
  163.                         
  164.                             ! Compute Laplacian using 2nd-order centered differences.
  165.                             !     
  166.                             !  in_field          -- input field (nx x ny x nz with halo in x- and y-direction)
  167.                             !  lap_field         -- result (must be same size as in_field)
  168.                             !  num_halo          -- number of halo points
  169.                             !  extend            -- extend computation into halo-zone by this number of points
  170.                             !
  171.                         
  172.                         
  173.                             subroutine simple_copy( field, copy, num_halo, extend )
  174.                                 implicit none
  175.                         
  176.                                 ! argument
  177.                                 real (kind=wp), intent(in) :: field(:, :)
  178.                                 real (kind=wp), intent(inout) :: copy(:, :)
  179.                                 integer, intent(in) :: num_halo, extend
  180.                         
  181.                                 ! local
  182.                                 integer :: i, j
  183.                         
  184.  + 1------------------<         do j = 1 + num_halo - extend, ny + num_halo + extend
  185.    1 Vcr2-------------<         do i = 1 + num_halo - extend, nx + num_halo + extend
  186.    1 Vcr2                           copy(i, j) = field(i, j)
  187.    1 Vcr2------------->         end do
  188.    1------------------>         end do
  189.                         
  190.                             end subroutine simple_copy
  191.                         
  192.                         
  193.                             ! Update the halo-zone using an up/down and left/right strategy.
  194.                             !    
  195.                             !  field             -- input/output field (nz x ny x nx with halo in x- and y-direction)
  196.                             !
  197.                             !  Note: corners are updated in the left/right phase of the halo-update
  198.                             !
  199.                             subroutine update_halo( field )
  200.                                 implicit none
  201.                         
  202.                                 ! argument
  203.                                 real (kind=wp), intent(inout) :: field(:, :, :)
  204.                         
  205.                                 ! local
  206.                                 integer :: i, j, k
  207.                         
  208.                                 ! bottom edge (without corners)
  209.  + f------------------<         do k = 1, nz
  210.  + f 2----------------<         do j = 1, num_halo
  211.    f 2 Vcr2-----------<         do i = 1 + num_halo, nx + num_halo
  212.    f 2 Vcr2                         field(i, j, k) = field(i, j + ny, k)
  213.    f 2 Vcr2----------->         end do
  214.    f 2---------------->         end do
  215.    f------------------>         end do
  216.                         
  217.                                 ! top edge (without corners)
  218.  + f------------------<         do k = 1, nz
  219.  + f 2----------------<         do j = ny + num_halo + 1, ny + 2 * num_halo
  220.    f 2 Vcr2-----------<         do i = 1 + num_halo, nx + num_halo
  221.    f 2 Vcr2                         field(i, j, k) = field(i, j - ny, k)
  222.    f 2 Vcr2----------->         end do
  223.    f 2---------------->         end do
  224.    f------------------>         end do
  225.                         
  226.                                 ! left edge (including corners)
  227.  + f------------------<         do k = 1, nz
  228.  + f f----------------<         do j = 1, ny + 2 * num_halo
  229.    f f Vcr2-----------<         do i = 1, num_halo
  230.    f f Vcr2                         field(i, j, k) = field(i + nx, j, k)
  231.    f f Vcr2----------->         end do
  232.    f f---------------->         end do
  233.    f------------------>         end do
  234.                         
  235.                                 ! right edge (including corners)
  236.  + f------------------<         do k = 1, nz
  237.  + f f----------------<         do j = 1, ny + 2 * num_halo
  238.    f f Vcr2-----------<         do i = nx + num_halo + 1, nx + 2 * num_halo
  239.    f f Vcr2                         field(i, j, k) = field(i - nx, j, k)
  240.    f f Vcr2----------->         end do
  241.    f f---------------->         end do
  242.    f------------------>         end do
  243.                         
  244.                             end subroutine update_halo
  245.                         
  246.                         
  247.                             ! initialize at program start
  248.                             ! (init MPI, read command line arguments)
  249.                             subroutine init()
  250.                                 use mpi, only : MPI_INIT
  251.                                 use m_utils, only : error
  252.                                 implicit none
  253.                         
  254.                                 ! local
  255.                                 integer :: ierror
  256.                         
  257.                                 ! initialize MPI environment
  258.  +                              call MPI_INIT(ierror)
  259.    Ip                           call error(ierror /= 0, 'Problem with MPI_INIT', code=ierror)
  260.                         
  261.  +                              call read_cmd_line_arguments()
  262.                         
  263.                             end subroutine init
  264.                         
  265.                         
  266.                             ! setup everything before work
  267.                             ! (init timers, allocate memory, initialize fields)
  268.                             subroutine setup()
  269.                                 use m_utils, only : timer_init
  270.                                 implicit none
  271.                         
  272.                                 ! local
  273.                                 integer :: i, j, k
  274.                         
  275.    Vw I--------------<>         call timer_init()
  276.                         
  277.                                 allocate( in_field(nx + 2 * num_halo, ny + 2 * num_halo, nz) )
  278.    AC----------------<>         in_field = 0.0_wp
  279.  + 1------------------<         do k = 1 + nz / 4, 3 * nz / 4
  280.  + 1 2----------------<         do j = 1 + num_halo + ny / 4, num_halo + 3 * ny / 4
  281.    1 2 A--------------<         do i = 1 + num_halo + nx / 4, num_halo + 3 * nx / 4
  282.    1 2 A                            in_field(i, j, k) = 1.0_wp
  283.    1 2 A-------------->         end do
  284.    1 2---------------->         end do
  285.    1------------------>         end do
  286.                         
  287.                                 allocate( out_field(nx + 2 * num_halo, ny + 2 * num_halo, nz) )
  288.    AC----------------<>         out_field = in_field
  289.                         
  290.                             end subroutine setup
  291.                         
  292.                         
  293.                             ! read and parse the command line arguments
  294.                             ! (read values, convert type, ensure all required arguments are present,
  295.                             !  ensure values are reasonable)
  296.                             subroutine read_cmd_line_arguments()
  297.                                 use m_utils, only : error
  298.                                 implicit none
  299.                         
  300.                                 ! local
  301.                                 integer iarg, num_arg
  302.                                 character(len=256) :: arg, arg_val
  303.                         
  304.                                 ! setup defaults
  305.                                 nx = -1
  306.                                 ny = -1
  307.                                 nz = -1
  308.                                 num_iter = -1
  309.                                 scan = .false.
  310.                         
  311.                                 num_arg = command_argument_count()
  312.                                 iarg = 1
  313.  + 1------------------<         do while ( iarg <= num_arg )
  314.    1                                call get_command_argument(iarg, arg)
  315.    1                                select case (arg)
  316.    1                                case ("--nx")
  317.    1 Ip                                 call error(iarg + 1 > num_arg, "Missing value for -nx argument")
  318.    1                                    call get_command_argument(iarg + 1, arg_val)
  319.    1 Ip                                 call error(arg_val(1:1) == "-", "Missing value for -nx argument")
  320.    1                                    read(arg_val, *) nx
  321.    1                                    iarg = iarg + 1
  322.    1                                case ("--ny")
  323.    1 Ip                                 call error(iarg + 1 > num_arg, "Missing value for -ny argument")
  324.    1                                    call get_command_argument(iarg + 1, arg_val)
  325.    1 Ip                                 call error(arg_val(1:1) == "-", "Missing value for -ny argument")
  326.    1                                    read(arg_val, *) ny
  327.    1                                    iarg = iarg + 1
  328.    1                                case ("--nz")
  329.    1 Ip                                 call error(iarg + 1 > num_arg, "Missing value for -nz argument")
  330.    1                                    call get_command_argument(iarg + 1, arg_val)
  331.    1 Ip                                 call error(arg_val(1:1) == "-", "Missing value for -nz argument")
  332.    1                                    read(arg_val, *) nz
  333.    1                                    iarg = iarg + 1
  334.    1                                case ("--num_iter")
  335.    1 Ip                                 call error(iarg + 1 > num_arg, "Missing value for -num_iter argument")
  336.    1                                    call get_command_argument(iarg + 1, arg_val)
  337.    1 Ip                                 call error(arg_val(1:1) == "-", "Missing value for -num_iter argument")
  338.    1                                    read(arg_val, *) num_iter
  339.    1                                    iarg = iarg + 1
  340.    1                                case ("--scan")
  341.    1                                    scan = .true.
  342.    1                                case default
  343.    1 Ip                                 call error(.true., "Unknown command line argument encountered: " // trim(arg))
  344.    1                                end select
  345.    1                                iarg = iarg + 1
  346.    1------------------>         end do
  347.                         
  348.                                 ! make sure everything is set
  349.                                 if (.not. scan) then
  350.    Ip                               call error(nx == -1, 'You have to specify nx')
  351.    Ip                               call error(ny == -1, 'You have to specify ny')
  352.                                 end if
  353.    Ip                           call error(nz == -1, 'You have to specify nz')
  354.    Ip                           call error(num_iter == -1, 'You have to specify num_iter')
  355.                         
  356.                                 ! check consistency of values
  357.                                 if (.not. scan) then
  358.    Ip                               call error(nx < 0 .or. nx > 1024*1024, "Please provide a reasonable value of nx")
  359.    Ip                               call error(ny < 0 .or. ny > 1024*1024, "Please provide a reasonable value of ny")
  360.                                 end if
  361.    Ip                           call error(nz < 0 .or. nz > 1024, "Please provide a reasonable value of nz")
  362.    Ip                           call error(num_iter < 1 .or. num_iter > 1024*1024, "Please provide a reasonable value of num_iter")
  363.                         
  364.                             end subroutine read_cmd_line_arguments
  365.                         
  366.                         
  367.                             ! cleanup at end of work
  368.                             ! (report timers, free memory)
  369.                             subroutine cleanup()
  370.                                 implicit none
  371.                         
  372.                                 deallocate(in_field, out_field)
  373.                         
  374.                             end subroutine cleanup
  375.                         
  376.                         
  377.                             ! finalize at end of program
  378.                             ! (finalize MPI)
  379.                             subroutine finalize()
  380.                                 use mpi, only : MPI_FINALIZE
  381.                                 use m_utils, only : error
  382.                                 implicit none
  383.                         
  384.                                 integer :: ierror
  385.                         
  386.  +                              call MPI_FINALIZE(ierror)
  387.    Ip                           call error(ierror /= 0, 'Problem with MPI_FINALIZE', code=ierror)
  388.                         
  389.                             end subroutine finalize
  390.                         
  391.                         
  392.                         end program main
ftn-3118 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 40 
  "init"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:249) not flattened because
  "mpi_abort" is missing.

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 42 
  Tree "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122) was inlined.  NOT INLINED:  MPI_COMM_RANK : MPI_ABORT.
       "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122)
          "my_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:162)
             "MPI_COMM_RANK"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-6288 ftn: VECTOR MAIN, File = stencil2d-simplecopy-k.F90, Line = 48 
  A loop starting at line 48 was not vectorized because it contains a call to subroutine "setup" on line 55.

ftn-3165 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 55 
  "setup"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:268) was not inlined because of
  deferred implementation - ALLOCATE encountered in callee.

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 57 
  Tree "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122) was inlined.  NOT INLINED:  MPI_COMM_RANK : MPI_ABORT.
       "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122)
          "my_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:162)
             "MPI_COMM_RANK"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-3163 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 58 
  "write_3d_float32_field_to_file"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:59) was not inlined
  because the routine contains initialized data with the SAVE attribute.

ftn-3165 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 61 
  "apply_diffusion"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:105) was not inlined
  because of deferred implementation - ALLOCATE encountered in callee.

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 68 
  Tree "timer_start"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:225) was inlined.  NOT INLINED:  MPI_ABORT : MPI_WTIME.
       "timer_start"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:225)
          "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
             "MPI_ABORT"
             "_STOP3"
          "MPI_WTIME"

ftn-3165 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 70 
  "apply_diffusion"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:105) was not inlined
  because of deferred implementation - ALLOCATE encountered in callee.

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 72 
  Tree "timer_end"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:258) was inlined.  NOT INLINED:  MPI_WTIME.
       "timer_end"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:258)
          "MPI_WTIME"

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 77 
  Tree "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122) was inlined.  NOT INLINED:  MPI_COMM_RANK : MPI_ABORT.
       "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122)
          "my_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:162)
             "MPI_COMM_RANK"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-3163 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 78 
  "write_3d_float32_field_to_file"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:59) was not inlined
  because the routine contains initialized data with the SAVE attribute.

ftn-3165 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 80 
  "cleanup"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:369) was not inlined because
  of deferred implementation - ALLOCATE encountered in callee.

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 82 
  Tree "timer_get"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:275) was inlined.  NOT INLINED:  MPI_REDUCE : MPI_COMM_SIZE : MPI_ABORT.
       "timer_get"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:275)
          "MPI_REDUCE"
          "num_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:146)
             "MPI_COMM_SIZE"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 83 
  Tree "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122) was inlined.  NOT INLINED:  MPI_COMM_RANK : MPI_ABORT.
       "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122)
          "my_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:162)
             "MPI_COMM_RANK"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 85 
  Tree "num_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:146) was inlined.  NOT INLINED:  MPI_COMM_SIZE : MPI_ABORT.
       "num_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:146)
          "MPI_COMM_SIZE"
          "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
             "MPI_ABORT"
             "_STOP3"

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 89 
  Tree "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122) was inlined.  NOT INLINED:  MPI_COMM_RANK : MPI_ABORT.
       "is_master"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:122)
          "my_rank"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:162)
             "MPI_COMM_RANK"
             "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
                "MPI_ABORT"
                "_STOP3"

ftn-3001 ftn: IPA MAIN, File = stencil2d-simplecopy-k.F90, Line = 93 
  Tree "finalize"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:379) was inlined.  NOT INLINED:  MPI_FINALIZE : MPI_ABORT.
       "finalize"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:379)
          "MPI_FINALIZE"
          "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
             "MPI_ABORT"
             "_STOP3"

ftn-6334 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 121 
  A loop starting at line 121 was not vectorized because it contains multiple potential exits.

ftn-6066 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 128 
   A loop nest at line 128 collapsed to a single loop.

ftn-6202 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 128 
  A loop starting at line 128 was replaced by a library call.

ftn-6066 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 129 
   A loop nest at line 129 collapsed to a single loop.

ftn-6202 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 129 
  A loop starting at line 129 was replaced by a library call.

ftn-3182 ftn: IPA APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 132 
  Loop has been flattened.

ftn-6315 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 132 
  A loop starting at line 132 was not vectorized because the target array (tmp1_field) would require rank expansion.

ftn-3001 ftn: IPA APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 134 
  Leaf "update_halo"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:199) was inlined.

ftn-6005 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 134 
  A loop starting at line 134 was unrolled 2 times.

ftn-6213 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 134 
  A loop starting at line 134 was conditionally vectorized.

ftn-6294 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 137 
  A loop starting at line 137 was not vectorized because a better candidate was found at line 141.

ftn-6007 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 137 
  A loop starting at line 137 was interchanged with the loop starting at line 138.

ftn-6007 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 137 
  A loop starting at line 137 was interchanged with the loop starting at line 140.

ftn-6005 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 137 
  A loop starting at line 137 was unrolled 4 times.

ftn-6005 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 138 
  A loop starting at line 138 was unrolled 2 times.

ftn-6213 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 138 
  A loop starting at line 138 was conditionally vectorized.

ftn-6294 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 140 
  A loop starting at line 140 was not vectorized because a better candidate was found at line 141.

ftn-6005 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 141 
  A loop starting at line 141 was unrolled 2 times.

ftn-6213 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 141 
  A loop starting at line 141 was conditionally vectorized.

ftn-6294 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 147 
  A loop starting at line 147 was not vectorized because a better candidate was found at line 148.

ftn-6004 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 147 
  A loop starting at line 147 was fused with the loop starting at line 140.

ftn-6005 ftn: SCALAR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 148 
  A loop starting at line 148 was unrolled 2 times.

ftn-6213 ftn: VECTOR APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 148 
  A loop starting at line 148 was conditionally vectorized.

ftn-3171 ftn: IPA APPLY_DIFFUSION, File = stencil2d-simplecopy-k.F90, Line = 159 
  "update_halo"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:199) was not inlined
  because it is not in the body of a loop.

ftn-6294 ftn: VECTOR SIMPLE_COPY, File = stencil2d-simplecopy-k.F90, Line = 184 
  A loop starting at line 184 was not vectorized because a better candidate was found at line 185.

ftn-6005 ftn: SCALAR SIMPLE_COPY, File = stencil2d-simplecopy-k.F90, Line = 185 
  A loop starting at line 185 was unrolled 2 times.

ftn-6213 ftn: VECTOR SIMPLE_COPY, File = stencil2d-simplecopy-k.F90, Line = 185 
  A loop starting at line 185 was conditionally vectorized.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 209 
  A loop starting at line 209 was not vectorized because a better candidate was found at line 211.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 210 
  A loop starting at line 210 was not vectorized because a better candidate was found at line 211.

ftn-6005 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 211 
  A loop starting at line 211 was unrolled 2 times.

ftn-6213 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 211 
  A loop starting at line 211 was conditionally vectorized.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 218 
  A loop starting at line 218 was not vectorized because a better candidate was found at line 220.

ftn-6004 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 218 
  A loop starting at line 218 was fused with the loop starting at line 209.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 219 
  A loop starting at line 219 was not vectorized because a better candidate was found at line 220.

ftn-6005 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 220 
  A loop starting at line 220 was unrolled 2 times.

ftn-6213 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 220 
  A loop starting at line 220 was conditionally vectorized.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 227 
  A loop starting at line 227 was not vectorized because a better candidate was found at line 229.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 228 
  A loop starting at line 228 was not vectorized because a better candidate was found at line 229.

ftn-6005 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 229 
  A loop starting at line 229 was unrolled 2 times.

ftn-6213 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 229 
  A loop starting at line 229 was conditionally vectorized.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 236 
  A loop starting at line 236 was not vectorized because a better candidate was found at line 238.

ftn-6004 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 236 
  A loop starting at line 236 was fused with the loop starting at line 227.

ftn-6294 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 237 
  A loop starting at line 237 was not vectorized because a better candidate was found at line 238.

ftn-6004 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 237 
  A loop starting at line 237 was fused with the loop starting at line 228.

ftn-6005 ftn: SCALAR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 238 
  A loop starting at line 238 was unrolled 2 times.

ftn-6213 ftn: VECTOR UPDATE_HALO, File = stencil2d-simplecopy-k.F90, Line = 238 
  A loop starting at line 238 was conditionally vectorized.

ftn-3021 ftn: IPA INIT, File = stencil2d-simplecopy-k.F90, Line = 258 
  "mpi_init" was not inlined because the compiler was unable to locate the routine.

ftn-3001 ftn: IPA INIT, File = stencil2d-simplecopy-k.F90, Line = 259 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3118 ftn: IPA INIT, File = stencil2d-simplecopy-k.F90, Line = 261 
  "read_cmd_line_arguments"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/stencil2d-simplecopy-k.F90:296) not
  flattened because "mpi_abort" is missing.

ftn-3001 ftn: IPA SETUP, File = stencil2d-simplecopy-k.F90, Line = 275 
  Leaf "timer_init"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:203) was inlined.

ftn-6373 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 275 
  A loop starting at line 275 with a trip count of 100 was unwound into 12 vector iterations.

ftn-6204 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 275 
  A loop starting at line 275 was vectorized.

ftn-6066 ftn: SCALAR SETUP, File = stencil2d-simplecopy-k.F90, Line = 278 
   A loop nest at line 278 collapsed to a single loop.

ftn-6202 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 278 
  A loop starting at line 278 was replaced by a library call.

ftn-6294 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 279 
  A loop starting at line 279 was not vectorized because a better candidate was found at line 281.

ftn-6294 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 280 
  A loop starting at line 280 was not vectorized because a better candidate was found at line 281.

ftn-6202 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 281 
  A loop starting at line 281 was replaced by a library call.

ftn-6066 ftn: SCALAR SETUP, File = stencil2d-simplecopy-k.F90, Line = 288 
   A loop nest at line 288 collapsed to a single loop.

ftn-6202 ftn: VECTOR SETUP, File = stencil2d-simplecopy-k.F90, Line = 288 
  A loop starting at line 288 was replaced by a library call.

ftn-6262 ftn: VECTOR READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 313 
  A loop starting at line 313 was not vectorized because it contains a call to a subroutine or function on line 314.

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 317 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 319 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 323 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 325 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 329 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 331 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 335 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 337 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 343 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 1 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 350 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 351 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 353 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 354 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 358 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 359 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 361 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3001 ftn: IPA READ_CMD_LINE_ARGUMENTS, File = stencil2d-simplecopy-k.F90, Line = 362 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined because argument 3 is a constant.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"

ftn-3021 ftn: IPA FINALIZE, File = stencil2d-simplecopy-k.F90, Line = 386 
  "mpi_finalize" was not inlined because the compiler was unable to locate the routine.

ftn-3001 ftn: IPA FINALIZE, File = stencil2d-simplecopy-k.F90, Line = 387 
  Tree "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178) was inlined.  NOT INLINED:  MPI_ABORT.
       "error"(/users/class169/Project/HPC4WC_project_ijblocking/Stencil_code/m_utils.F90:178)
          "MPI_ABORT"
          "_STOP3"


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
